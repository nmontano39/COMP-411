nbm1
sec14

# Program Organization

For this assignment, we first modified our parser to return a ParseException everywhere a null or identifier
is not followed by : Type. Once the program has successfully been parse without throwing a ParseException, we must
type check the program before interpreting the AST. We do this by recursively traversing the AST through the
implementation of ASTVisitor in TypeCheck.java which throws TypeExceptions where necessary. The goal of type-checking
is to ensure that all variables are correctly typed including those used as arguments for functions and as components
of lists. We also ensure that no primitve functions are called without being given arguments.


# Testing Processes

We decided to use the provided test cases along with additional tests of our own. Some edge cases we
tested for include lists of typed-nulls and incorrectly typed lists/functions. Our code passes all of
these tests with 82% line coverage.