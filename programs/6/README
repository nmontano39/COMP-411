nbm1
sec14

# Program Organization

Phase 1:
In order to complete this phase, we filled in the stubs for the class ConvertToCPS in the Syntax java file. The
class ConvertToCPS implements SymASTVisitor in order to recursively convert an expression to CPS form. Each forXXX
method handles cases 1-14 for defining the cps transformation. The forXXX method first checks the conditional if
for each case before calling methods caseXXX corresponding to cases 1-14.

Phase 2:
To complete phase 2 we filled in the stubs for the class SConverter in the Syntax java file. This class uses a
SymASTVisitor to perform the conversion to sd form. Each of the visitors' forXXX methods recursively
goes through the expression while putting each variable into a symbolTable. This symbolTable stores the information for
each variables' depth and static distance.

Phase 3:
We completed phase 3 by filling in the stubs for the class SymEvaluator in the Semantics java file. Each forXXX method
in SymEvaluator uses a SymASTVisitor to evaluate the SymAST programs, returning a JamVal.

Phase 4:
For phase 4, we added caseLetcc to the caseXXX handlers we created in phase 1.



# Testing Processes

We tested our program using the provided test cases along with many of our own. We created testXXX cases to handle cases
such as Let, Letcc, UnOpSimple/Complex, BinOpSimple/Complex, IfSimple/Complex, BlockSimple/Complex, and many
more while using cpsCheck, sdCheck, and allEvalCheck as we progressed through each phase. Our code passes all 53 tests
with 86% line coverage in SymEvaluator.